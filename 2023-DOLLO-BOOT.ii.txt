10 cls : print : print " DOLLO-BOOT - Measures matching of trees inferred under different assumptions" : print "   ========================================================================="20 print "          Matthew A. Wills, University of Bath, The Avenue, BA2 7AY." : print "                             m.a.wills@bath.ac.uk" : print "                       * Please see the Read Me file *" : print24 prtint: print " Make Batch file (1) or parse PAUP log file (2): ";:input mode26 if mode = 2 then goto 300030 print : print " Name of PAUP file to analyse: "; : input paup$40 open paup$ for input as #1: Randomize timer50 input #1,line$ : st = 160 'Now read through the line with a four character window, looking for ntax70 if mid$(line$,st,4) = "" then goto 5075 if mid$(line$,st,4) = "ntax" or mid$(line$,st,4) = "NTAX" then ntax = val(mid$(line$,(st+5),10)) : goto 10080  st = st+1 : goto 70100 close #1 : print " There are "; : print ntax; : print "taxa in this data set"102 print : print " Name of molecular tree file: "; : input moleculartree$110 print : print " Name of minumum assumption set: "; : input ass$115 print : print " Name of maximum assumption set: "; : input ass2$146 '147 ' Set up header of the batch file150 print : print " Name you wish to give to batch file";152 input bat$154 print : print " Name you wish PAUP* to assign to the log file when this is created";156 input logfile$158    open "DOLLO-BOOT Prefs" for input as #1159    input #1,r$ : input #1,h$ : input #1,m$: input #1,c$: input#1,s$160    randpart = val(mid$(r$,55,9)) : heur = val(mid$(h$,55,9)) : maxtrees = val(mid$(m$,55,9)) : nchuck = val(mid$(c$,55,9)) : tosave = val(mid$(s$,55,9))161    close #1162 print : print "   Settings read from Prefs file"164 print "   Number of random partitions of the data set:                  "; : print randpart165 'print "   Number of heuristic searches:                                 ";: print hsearches166 print "   Number of random additions in each heuristic search:          "; : print heur168 print "   MaxTrees setting (this will affect the efficacy of searches): "; : print maxtrees169 print "   NChuck setting (this will affect the efficacy of searches):   "; : print nchuck170 print "   Maximum number of trees to save from each heuristic search:   "; : print tosave172 print : print " Any comments for your reference";174 input comm$175 open paup$ for input as #1: open bat$ for output as #2176 while not eof(1)177 input #1, line$: print #2, line$178 wend179 close #1180 print #2,: print #2,"Begin PAUP;" : print #2, : print #2,"[";comm$;"]" : print #2,190 print #2,"set autoclose=yes warntree=no warntsave=no warnreset=no;"210 print #2,"defaults hsearch swap=tbr addseq=random nreps=";heur;" dstatus=no;"212 '215 print #2,216 '250 '300 'head is searched with DOLLO, tail is searched without400 '410 'print #2,"[Run a search with minimum assumptions, and save to a tree file]" : print #2,1225 '1226 print #2,"set criterion=parsimony;"1227 print #2,"set maxtrees=";: print #2, maxtrees;: print #2," increase = no;"1228 print #2,"[set nchuck=";: print #2, nchuck;: print #2," set chuckscore = 1;]"1231 print #2,"execute ";: print #2,ass$+";"1235 print #2,"hsearch;"1237 print #2,"condense collapse=maxbrlen deldupes=yes;"1241'1242 print #2,"contree / strict=yes semistrict=no majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,"org.head.strict;"1244 print #2,"contree / strict=no semistrict=yes majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,"org.head.semi;"1246 print #2,"contree / strict=no semistrict=no adams=no majrule=yes LE50=yes grpfreq=no showtree=no treefile =";:print #2,paup$; : print #2,"org.head.maj;"1251 print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, "file=";paup$+"org.head"; : print #2,"  ;" : print #2,1252 '1255 'print #2,"[Run a search with maximum assumptions, and save to a tree file]" : print #2,1256 '1260 print #2,"set criterion=parsimony;"1263 print #2,"set maxtrees=";: print #2, maxtrees;: print #2," increase = no;"1270 print #2,"[set nchuck=";: print #2, nchuck;: print #2," set chuckscore = 1;]"1273 print #2,"execute ";: print #2,ass2$+";"1275 print #2,"hsearch;"1277 print #2,"condense collapse=maxbrlen deldupes=yes;"1281'1282 print #2,"contree / strict=yes semistrict=no majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,"org.tail.strict;"1284 print #2,"contree / strict=no semistrict=yes majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,"org.tail.semi;"1286 print #2,"contree / strict=no semistrict=no adams=no majrule=yes LE50=yes grpfreq=no showtree=no treefile =";:print #2,paup$; : print #2,"org.tail.maj;"1289  print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, "file=";paup$+"org.tail"; : print #2,"  ;" : print #2,1290 '1291 '1300 print #2,"[Now run each of the randomized partitions, and save each to a tree file]" : print #2,1303 '    Set the assumptions back to the minimum1305 print #2,"execute ";: print #2,ass$+";"1306 '1307 '1310 for n = 1 to randpart1330 print #2,"set criterion=parsimony;"1333 print #2,"set maxtrees=";: print #2, maxtrees;: print #2," increase = no;"1334 print #2,"[set nchuck=";: print #2, nchuck;: print #2," set chuckscore = 1;]"1338 print #2,"bootstrap nreps=1 keepAll grpFreq=no;"1340 'print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, " file=";paup$; : print #2,"Head"; : print #2,n; : print #2,"  ;" : print #2,1341 '1342 print #2,"contree / strict=yes semistrict=no majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"head.strict;"1344 print #2,"contree / strict=no semistrict=yes majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"head.semi;"1346 print #2,"contree / strict=no semistrict=no adams=no majrule=yes LE50=yes grpfreq=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"head.maj;"1347 print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, " file=";paup$; : print #2,"Head"; : print #2,n; : print #2,"  ;" : print #2,1348 '1360 print #2,"set criterion=parsimony;"1363 print #2,"set maxtrees=";: print #2, maxtrees;: print #2," increase = no;"1364 print #2,"[set nchuck=";: print #2, nchuck;: print #2," set chuckscore = 1;]"1375 print #2,"gettrees file ="; : print #2,moleculartree$ : print #2," ;"1378 print #2,"deroot;"1380 'print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, " file=";paup$; : print #2,"Tail"; : print #2,n; : print #2,"  ;" : print #2,1381'1382 print #2,"contree / strict=yes semistrict=no majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"tail.strict;"1384 print #2,"contree / strict=no semistrict=yes majrule=no adams=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"tail.semi;"1386 print #2,"contree / strict=no semistrict=no adams=no majrule=yes LE50=yes grpfreq=no showtree=no treefile =";:print #2,paup$; : print #2,str$(n)+"tail.maj;"1387 print #2,"savetrees from = 1 to = ";: print #2, tosave;: print #2, " file=";paup$; : print #2,"Tail"; : print #2,n; : print #2,"  ;" : print #2,1388 '1390 next n1400 '1410 '1430 print #2, : print #2,"[Start log file, import each pair of tree files, and compute tree-to-tree distance matrices]" : print #2,1500 print #2, "ClearTrees;": print #2,"log start file=";logfile$;";"1501 '1510 'This is the newly added comparison between the MINIMUM assumption trees and the molecular trees1520 '1630 print #2,"set maxtrees=";: print #2, (2*tosave);: print #2,";": print #2,1640 print #2,"gettrees file ="; : print #2, moleculartree$; : print #2," mode = 3;"1645 print #2,"deroot;"1660 'print #2,"describetrees all/plot = none;"1670 print #2,"gettrees file ="; : print #2,paup$+"org.head"; : print #2," mode = 7;"1680 print #2,"treedist metric = RF"; : print #2,";"1682 'print #2,"treedist metric = ABC"; :print #2,";" 1683 print #2,"treedist metric = Matching"; :print #2,";" : print #21684 '1685 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2," mode = 3;"1686 print #2,"deroot;"1687 'print #2,"describetrees all/plot = none;"1688 print #2,"gettrees file ="; : print #2,paup$+"org.head.strict"; : print #2," mode = 7;"1690 print #2,"treedist metric = RF"; : print #2,";"1692 'print #2,"treedist metric = ABC"; :print #2,";" 1693 print #2,"treedist metric = Matching"; :print #2,";" : print #21697 '1698 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2,"  mode = 3;"1699 print #2,"deroot;"1700 'print #2,"describetrees all/plot = none;"1701 print #2,"gettrees file ="; : print #2,paup$+"org.head.semi"; : print #2,"  mode = 7;"1702 print #2,"treedist metric = RF"; : print #2,";"1704 'print #2,"treedist metric = ABC"; :print #2,";" 1705 print #2,"treedist metric = Matching"; :print #2,";" : print #21706 '1707 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2,"  mode = 3;"1708 print #2,"deroot;"1709 print #2,"gettrees file ="; : print #2,paup$+"org.head.maj"; : print #2,"  mode = 7;"1710 print #2,"treedist metric = RF"; : print #2,";"1711 'print #2,"treedist metric = ABC"; :print #2,";" 1712 print #2,"treedist metric = Matching"; :print #2,";" : print #21713 '1714 '1715 ' This is the MAXIMUM assumption trees to molecular1720 '1730 print #2,"set maxtrees=";: print #2, (2*tosave);: print #2,";": print #2,1740 print #2,"gettrees file ="; : print #2, moleculartree$; : print #2," mode = 3;"1745 print #2,"deroot;"1760 'print #2,"describetrees all/plot = none;"1770 print #2,"gettrees file ="; : print #2,paup$+"org.tail"; : print #2," mode = 7;"1780 print #2,"treedist metric = RF"; : print #2,";"1782 'print #2,"treedist metric = ABC"; :print #2,";" 1783 print #2,"treedist metric = Matching"; :print #2,";" : print #21784 '1785 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2," mode = 3;"1786 print #2,"deroot;"1787 'print #2,"describetrees all/plot = none;"1788 print #2,"gettrees file ="; : print #2,paup$+"org.tail.strict"; : print #2," mode = 7;"1790 print #2,"treedist metric = RF"; : print #2,";"1792 'print #2,"treedist metric = ABC"; :print #2,";" 1793 print #2,"treedist metric = Matching"; :print #2,";" : print #21794 '1795 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2,"  mode = 3;"1797 print #2,"deroot;"1799 'print #2,"describetrees all/plot = none;"1800 print #2,"gettrees file ="; : print #2,paup$+"org.tail.semi"; : print #2,"  mode = 7;"1802 print #2,"treedist metric = RF"; : print #2,";"1804 'print #2,"treedist metric = ABC"; :print #2,";" 1805 print #2,"treedist metric = Matching"; :print #2,";" : print #21806 '1807 print #2,"gettrees file ="; : print #2,moleculartree$; : print #2,"  mode = 3;"1808 print #2,"deroot;"1809 print #2,"gettrees file ="; : print #2,paup$+"org.tail.maj"; : print #2,"  mode = 7;"1810 print #2,"treedist metric = RF"; : print #2,";"1811 'print #2,"treedist metric = ABC"; :print #2,";" 1812 print #2,"treedist metric = Matching"; :print #2,";" : print #21813 '1919 '1920 for nn = 1 to randpart1930 print #2,"gettrees file ="; : print #2,moleculartree$ ; : print #2," mode = 3;"1935 print #2,"deroot;"1970 print #2,"gettrees file ="; : print #2,paup$; : print #2,"Head"; : print #2,str$(nn); : print #2," mode = 7;"1980 print #2,"treedist metric = RF"; : print #2,";"1982 'print #2,"treedist metric = ABC"; :print #2,";" 1984 print #2,"treedist metric = Matching"; :print #2,";"1986 print #2,1987'1990 print #2,"gettrees file ="; : print #2,moleculartree$ ; : print #2," mode = 3;"1991 print #2,"deroot;"1992 print #2,"gettrees file ="; : print #2,paup$; : print #2,str$(nn);: print #2,"head.strict "; : print #2," mode = 7;"1994 print #2,"treedist metric = RF"; : print #2,";"1995 'print #2,"treedist metric = ABC"; :print #2,";" 1996 print #2,"treedist metric = Matching"; :print #2,";"1997 print #2,1998'1999 print #2,"gettrees file ="; : print #2,moleculartree$ ; : print #2," mode = 3;"2000 print #2,"deroot;"2001 print #2,"gettrees file ="; : print #2,paup$; : print #2,str$(nn);: print #2,"head.semi "; : print #2," mode = 7;"2002 print #2,"treedist metric = RF"; : print #2,";"2003 'print #2,"treedist metric = ABC"; :print #2,";" 2004 print #2,"treedist metric = Matching"; :print #2,";"2005 print #2,2006'2009 print #2,"gettrees file ="; : print #2,moleculartree$ ; : print #2," mode = 3;"2010 print #2,"deroot;"2011 print #2,"gettrees file ="; : print #2,paup$; :print #2,str$(nn);: print #2,"head.maj "; : print #2," mode = 7;"2012 print #2,"treedist metric = RF"; : print #2,";"2013 'print #2,"treedist metric = ABC"; :print #2,";" 2014 print #2,"treedist metric = Matching"; :print #2,";"2016 print #2,2018'2020 next nn2025 print #2, : print #2,"log stop;"2040 print " Randomisation complete. Now run Batch file through PAUP": close #2 : end2050 '2051 '2052 '2053 '2060 '2062 '2064 '3000 '3030 PRINT :PRINT " Name of PARTTOP log file to analyse: ";:INPUT Log$3032 'PRINT " Name for Summary log file: ";:INPUT Logsum$3033 Logsum$="Results check.tmp"3034 OPEN Log$ for input as #1:OPEN Logsum$ for output as #2:OPEN Logsum$+"2" for output as #43100 ' Now look for the number of trees saved"3150 '3152 OPEN "DOLLO-BOOT Prefs" for input as #33155                     INPUT #3,R$:Randpart=VAL(MID$(R$,55,9)):CLOSE #33156                     PRINT :PRINT " Random partitions: ";:PRINT Randpart:PRINT 3157                     DIM Treenumbers((4*(Randpart+2)),2)3158                     DIM Results((4*(Randpart+2)),18)3159               FOR Gettreenumbers=1 TO 4*(Randpart+2)3160 INPUT #1,Line$:St=13162 'if Line$="" then offend=offend+1: if offend>100 then print " Out of file data: check that the number of partition replicates is correct": end3164 IF MID$(Line$,St,19)="" THEN GOTO 31603166 IF MID$(Line$,St,20)="trees read from file" THEN Htrees=VAL(Line$): GOTO 31723168 IF MID$(Line$,St,19)="tree read from file" THEN Htrees=VAL(Line$): GOTO 31723170  St=St+1: GOTO 31643172 PRINT #4,Line$3175 INPUT #1,Line$:St=13176 IF MID$(Line$,St,19)="" THEN GOTO 31753178 IF MID$(Line$,St,20)="trees read from file" THEN Ttrees=VAL(Line$): GOTO 31853180 IF MID$(Line$,St,19)="tree read from file" THEN Ttrees=VAL(Line$): GOTO 31853184  St=St+1: GOTO 31763185 PRINT #4,Line$3186          Treenumbers(Gettreenumbers,1)=Htrees:Treenumbers(Gettreenumbers,2)=Ttrees3188               PRINT " Extracting tree numbers for partition ";: Print Gettreenumbers: offend=0: NEXT Gettreenumbers3189               CLOSE #1:CLOSE #43190 '3191 ' Now cut out the distance matrices into separate files...3192 PRINT :PRINT " Extracting symmetrical distance matrices...'"3193 OPEN Log$ for input as #13194 FOR Passes=1 TO (4*(Randpart+2)):'3200 OPEN Origname$+STR$(Passes)+"symm.tmp" for output as #33205 PRINT #3,"RF (= symmetric difference) distances between trees"3210  INPUT #1,Line$:IF Line$<>"RF (= symmetric difference) distances between trees" THEN GOTO 32103220 INPUT #1,Line$3230 IF Line$="Distribution of RF (= symmetric difference) distances between trees" THEN GOTO 32543240 'if line$ = "Symmetric-difference distances between trees" then print line$: goto 32203250 IF Line$="" THEN GOTO 32203252 PRINT #3,Line$;:PRINT #3," ***":GOTO 32203254 PRINT #3,"End of matrix file": CLOSE #3:NEXT Passes3256 CLOSE #13257 'PRINT " Extracting ABC Distance Matrices..."3262 'OPEN Log$ for input as #13264 'FOR Passes=1 TO (4*(Randpart+2))3266 'OPEN Origname$+STR$(Passes)+"ABC.tmp" for output as #33268 'PRINT #3,"ABC distances between trees"3270 'INPUT #1,Line$:IF MID$(Line$,1,27)<>"ABC distances between trees" THEN GOTO 3270                                                                                                                                                                              3272 'INPUT #1,Line$3274 'IF MID$(Line$,17,27)="ABC distances between trees" THEN GOTO 32823276 'if mid$(line$,1,16) = "Agreement-metric" and mid$(line$,23,20) = "distances between tr" then print line$: goto 32723278 'IF Line$="" THEN GOTO 32723280 'PRINT #3,Line$;:PRINT #3," ***":GOTO 32723282 'PRINT #3,"End of matrix file": CLOSE #3:NEXT Passes3297 'CLOSE #13300 PRINT " Extracting Matching Distance Matrices..."3305 OPEN Log$ for input as #13310 FOR Passes=1 TO (4*(Randpart+2))3315 OPEN Origname$+STR$(Passes)+"MAT.tmp" for output as #33320 PRINT #3,"Matching distances between trees"3322  INPUT #1,Line$:IF MID$(Line$,1,32)<>"Matching distances between trees" THEN GOTO 3322                                                                                                                                                                              3324 INPUT #1,Line$3326 IF MID$(Line$,17,32)="matching distances between trees" THEN GOTO 33363330 'if mid$(line$,1,16) = "Agreement-metric" and mid$(line$,23,20) = "distances between tr" then print line$: goto 33243332 IF Line$="" THEN GOTO 33243334 PRINT #3,Line$;:PRINT #3," ***":GOTO 33243336 PRINT #3,"End of matrix file": CLOSE #3:NEXT Passes3338 CLOSE #13340 '3355 Passes=03360 '3365 '3370 ' Find the structure of the similarity matrices - i.e., where they are chopped up - and write these spacings to the tmp files3375 '3380 '3385 FOR Passes=1 TO (4*(Randpart+2)):Lin=03390 OPEN Origname$+STR$(Passes)+"symm.tmp" for input as #33400 '3410 OPEN "Symm"+STR$(Passes)+".tmp" for output as #43420 Lin=Lin+1:INPUT #3,Line$3430 IF Line$="End of matrix file" THEN PRINT #4,Lin:PRINT #4,"end":GOTO 35003440 IF MID$(Line$,1,27)<>"RF (= symmetric difference)" THEN GOTO 34203450 PRINT #4,Lin3460 GOTO 34203500 CLOSE #3:CLOSE #43510 NEXT Passes3511 '3540 'FOR Passes=1 TO (4*(Randpart+2)):Lin=03550 'OPEN Origname$+STR$(Passes)+"ABC.tmp" for input as #33600 '3610 'OPEN "ABC"+STR$(Passes)+".tmp" for output as #43611 3620 'Lin=Lin+1:INPUT #3,Line$3630 'IF Line$="End of matrix file" THEN PRINT #4,Lin:PRINT #4,"end":GOTO 37003640 'IF MID$(Line$,1,27)<>"ABC distances between trees" THEN GOTO 36203650 'PRINT #4,Lin3660 'GOTO 36203700 'CLOSE #3:CLOSE #43710 'NEXT Passes3720 '3740 FOR Passes=1 TO (4*(Randpart+2)):Lin=03750 OPEN Origname$+STR$(Passes)+"MAT.tmp" for input as #33800 '3810 OPEN "MAT"+STR$(Passes)+".tmp" for output as #43811 3820 Lin=Lin+1:INPUT #3,Line$3830 IF Line$="End of matrix file" THEN PRINT #4,Lin:PRINT #4,"end":GOTO 39003840 IF MID$(Line$,1,32)<>"Matching distances between trees" THEN GOTO 38203850 PRINT #4,Lin3860 GOTO 38203900 CLOSE #3:CLOSE #43910 NEXT Passes3920 '3930 '4040 ' PROCEDURE FOR SYMMETRICAL DISTANCE MATRICES4041 4042 Alltrees=1:Strict=2:Semistrict=3:Majrule=4:Fillin=14050 FOR Passes=1 TO (4*(Randpart+2))4051 '4055 DIM Nearsymm(Treenumbers(Passes,1)+Treenumbers(Passes,2))4056 FOR Fil=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2)):Nearsymm(Fil)=99999999:NEXT Fil4060 PRINT "   Extracting tree to tree distances from ";:PRINT Origname$+STR$(Passes)+"symm":OPEN Origname$+STR$(Passes)+"symm.tmp" for input as #34070  OPEN "Symm"+STR$(Passes)+".tmp" for input as #44080 'open "CULLED"+str$(passes) for output as #54090 INPUT #4,Readfrom$:Readfrom=VAL(Readfrom$)4100 INPUT #4,Readto$:Readto=VAL(Readto$):IF Readto$="end" THEN GOTO 46104110 INPUT #3,Header$4120 INPUT #3,Column$:Column=VAL(Column$)4130 FOR Dataline=(Readfrom+2) TO (Readto-1)4150 INPUT #3,Line$:St=04160 Rownumber=VAL(Line$)4170 IF MID$(Line$,St,1)<>" " THEN St=St+1:GOTO 41704180 IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 41804185 'print mid$(line$,st,100)4200 IF MID$(Line$,St,1)="*" THEN GOTO 45004205 IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 42054210 IF MID$(Line$,St,1)<>" " THEN Building$=Building$+MID$(Line$,St,1):St=St+1:GOTO 42104218 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) THEN Dist=VAL(Building$)4220 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearsymm(Rownumber) THEN Nearsymm(Rownumber)=VAL(Building$)4222 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearsymm(Column+Addtocolumn) THEN Nearsymm(Column+Addtocolumn)=VAL(Building$)4223 'print Building$4225 Building$=""4230 Addtocolumn=Addtocolumn+14240 St=St+1:GOTO 42004500            Addtocolumn=04510 NEXT Dataline4520 Readfrom=Readto:GOTO 41004610 CLOSE #3:CLOSE #4:CLOSE #54615 FOR Look=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2))4616 Distsum=Distsum+Nearsymm(Look): 'PRINT Nearsymm(Look):INPUT Kendodd4617 NEXT Look4618 IF Passes=Alltrees THEN Numcomp=(Treenumbers(Passes,1)+Treenumbers(Passes,2))4620 IF Passes=Alltrees THEN Results(Fillin,1)=Numcomp:Results(Fillin,2)=Distsum:Results(Fillin,3)=Distsum/Numcomp4621 IF Passes=Strict THEN Results(Fillin,4)=Distsum/24622 IF Passes=Semistrict THEN Results(Fillin,5)=Distsum/24623 IF Passes=Majrule THEN Results(Fillin,6)=Distsum/2:Alltrees=Alltrees+4:Strict=Strict+4:Semistrict=Semistrict+4:Majrule=Majrule+4:Fillin=Fillin+14630 Dist=0:Numcomp=0:Distsum=0:Distnum=04640 NEXT Passes4641 '4642 '5040 ' PROCEDURE FOR ABC DISTANCE MATRICES5041 'Alltrees=1:Strict=2:Semistrict=3:Majrule=4:Fillin=15050 'FOR Passes=1 TO (4*(Randpart+2))5051 '5055 'DIM Nearad1(Treenumbers(Passes,1)+Treenumbers(Passes,2))5056 'FOR Fil=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2)):Nearad1(Fil)=99999999:NEXT Fil5060 'PRINT "   Extracting tree to tree distances from ";:PRINT Origname$+STR$(Passes)+"ABC":OPEN Origname$+STR$(Passes)+"ABC.tmp" for input as #35070 ' OPEN "ABC"+STR$(Passes)+".tmp" for input as #45080 'open "CULLED"+str$(passes) for output as #55090 'INPUT #4,Readfrom$:Readfrom=VAL(Readfrom$)5100 'INPUT #4,Readto$:Readto=VAL(Readto$):IF Readto$="end" THEN GOTO 56105110 'INPUT #3,Header$5120 'INPUT #3,Column$:Column=VAL(Column$)5130 'FOR Dataline=(Readfrom+2) TO (Readto-1)5150 'INPUT #3,Line$:St=05160 'Rownumber=VAL(Line$)5170 'IF MID$(Line$,St,1)<>" " THEN St=St+1:GOTO 51705180 'IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 51805185 'print mid$(line$,st,100)5200 'IF MID$(Line$,St,1)="*" THEN GOTO 55005205 'IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 52055210 'IF MID$(Line$,St,1)<>" " THEN Building$=Building$+MID$(Line$,St,1):St=St+1:GOTO 52105218 'IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) THEN Dist=VAL(Building$)5220 'IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearad1(Rownumber) THEN Nearad1(Rownumber)=VAL(Building$)5222 'IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearad1(Column+Addtocolumn) THEN Nearad1(Column+Addtocolumn)=VAL(Building$)5224 'print Building$5225 'Building$=""5230 'Addtocolumn=Addtocolumn+15240 'St=St+1:GOTO 52005500 '          Addtocolumn=05510 'NEXT Dataline5520 'Readfrom=Readto:GOTO 51005610 'CLOSE #3:CLOSE #4:CLOSE #55615 'FOR Look=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2))5616 'Distsum=Distsum+Nearad1(Look)5617 'NEXT Look5618 'print Distsum5619 'IF Passes=Alltrees THEN Numcomp=(Treenumbers(Passes,1)+Treenumbers(Passes,2))5620 'IF Passes=Alltrees THEN Results(Fillin,7)=Numcomp:Results(Fillin,8)=Distsum:Results(Fillin,9)=Distsum/Numcomp5622 'IF Passes=Strict THEN Results(Fillin,10)=Distsum/25624 'IF Passes=Semistrict THEN Results(Fillin,11)=Distsum/25626 'IF Passes=Majrule THEN Results(Fillin,12)=Distsum/2:Alltrees=Alltrees+4:Strict=Strict+4:Semistrict=Semistrict+4:Majrule=Majrule+4:Fillin=Fillin+15628 'Dist=0:Numcomp=0:Distsum=0:Distnum=05630 'NEXT Passes5632 '5634 '5640 ' PROCEDURE FOR MATCHING DISTANCE MATRICES5641 Alltrees=1:Strict=2:Semistrict=3:Majrule=4:Fillin=15650 FOR Passes=1 TO (4*(Randpart+2))5651 '5655 DIM Nearmatch(Treenumbers(Passes,1)+Treenumbers(Passes,2))5656 FOR Fil=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2)):Nearmatch(Fil)=99999999:NEXT Fil5660 PRINT "   Extracting tree to tree distances from ";:PRINT Origname$+STR$(Passes)+"MAT":OPEN Origname$+STR$(Passes)+"MAT.tmp" for input as #35670  OPEN "MAT"+STR$(Passes)+".tmp" for input as #45680 'open "CULLED"+str$(passes) for output as #55690 INPUT #4,Readfrom$:Readfrom=VAL(Readfrom$)5700 INPUT #4,Readto$:Readto=VAL(Readto$):IF Readto$="end" THEN GOTO 58605710 INPUT #3,Header$5720 INPUT #3,Column$:Column=VAL(Column$)5730 FOR Dataline=(Readfrom+2) TO (Readto-1)5750 INPUT #3,Line$:St=05760 Rownumber=VAL(Line$)5770 IF MID$(Line$,St,1)<>" " THEN St=St+1:GOTO 57705780 IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 57805785 'print mid$(line$,st,100)5790 IF MID$(Line$,St,1)="*" THEN GOTO 58455795 IF MID$(Line$,St,1)=" " THEN St=St+1:GOTO 57955800 IF MID$(Line$,St,1)<>" " THEN Building$=Building$+MID$(Line$,St,1):St=St+1:GOTO 58005818 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) THEN Dist=VAL(Building$)5820 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearmatch(Rownumber) THEN Nearmatch(Rownumber)=VAL(Building$)5822 IF Rownumber>Treenumbers(Passes,1) AND (Column+Addtocolumn)<=Treenumbers(Passes,1) AND VAL(Building$)<Nearmatch(Column+Addtocolumn) THEN Nearmatch(Column+Addtocolumn)=VAL(Building$)5824 'print Building$5825 Building$=""5830 Addtocolumn=Addtocolumn+15840 St=St+1:GOTO 57905845             Addtocolumn=05850 NEXT Dataline5855 Readfrom=Readto:GOTO 57005860 CLOSE #3:CLOSE #4:CLOSE #55865 FOR Look=1 TO (Treenumbers(Passes,1)+Treenumbers(Passes,2))5870 Distsum=Distsum+Nearmatch(Look)5875 NEXT Look5880 'print Distsum5885 IF Passes=Alltrees THEN Numcomp=(Treenumbers(Passes,1)+Treenumbers(Passes,2))5890 IF Passes=Alltrees THEN Results(Fillin,13)=Numcomp:Results(Fillin,14)=Distsum:Results(Fillin,15)=Distsum/Numcomp5895 IF Passes=Strict THEN Results(Fillin,16)=Distsum/25900 IF Passes=Semistrict THEN Results(Fillin,17)=Distsum/25905 IF Passes=Majrule THEN Results(Fillin,18)=Distsum/2:Alltrees=Alltrees+4:Strict=Strict+4:Semistrict=Semistrict+4:Majrule=Majrule+4:Fillin=Fillin+15910 Dist=0:Numcomp=0:Distsum=0:Distnum=05920 NEXT Passes5930'5940'5950'6000 OPEN Log$+"Results.xls" for output as #66070 PRINT #6,"Data treatment",:PRINT #6,"Molecular Number",:PRINT #6,"Morphological number Number",:PRINT #6,"Symm comparions",:PRINT #6,"Sum of min symm",:PRINT #6,"Mean of min symm",6071 PRINT #6,"Strict distance",:PRINT #6,"Semistrict distance",:PRINT #6,"Maj Rule distance",6072 PRINT #6,"ABC comparisons",:PRINT #6,"Sum of min ABC",:PRINT #6,"Mean of min ABC",6073 PRINT #6,"Strict distance",:PRINT #6,"Semistrict distance",:PRINT #6,"Maj Rule distance",6074 Print #6,"Matching comparisons",:PRINT #6,"Sum of min Matching",:PRINT #6,"Mean of min Matching",6075 Print #6,"Strict distance",:PRINT #6,"Semistrict distance",:PRINT #6,"Maj Rule distance"6076 '6077 '6078 FOR Passes=1 TO Randpart+26079 IF Passes=1 THEN PRINT #6,"Minimum assumptions trees to molecular",6080 IF Passes=2 THEN PRINT #6,"Maximum assumptions trees to molecular",6081 IF Passes>2 THEN PRINT #6,"Bootstrap minimum assumptions to molecular ";: PRINT #6,Passes-2,6179 FOR Out=1 TO 2:PRINT #6,Treenumbers(((Passes*4)-3),Out),:NEXT Out6180 FOR Out=1 TO 18:PRINT #6,Results(Passes,Out),:NEXT Out:PRINT #6,6182 NEXT Passes:Passes=06183 '6184 '6190 ' Check Where the Original differences lie on the random distributions6192 PRINT #6,"Approximate p-value for maximum assumptions being better:",:PRINT #6,"-",:PRINT #6,"-",:PRINT #6,"-",:PRINT #6,"-",6198        FOR Check=2 TO Randpart+26200        IF Results(Check,3)<=Results(2,3) THEN Sigsym=Sigsym+16201        IF Results(Check,4)<=Results(2,4) THEN Strictsym=Strictsym+16202        IF Results(Check,5)<=Results(2,5) THEN Semisym=Semisym+16203        IF Results(Check,6)<=Results(2,6) THEN Majsym=Majsym+16204        IF Results(Check,9)<=Results(2,9) THEN Sigd=Sigd+16205        IF Results(Check,10)<=Results(2,10) THEN Strictd=Strictd+16206        IF Results(Check,11)<=Results(2,11) THEN Semid=Semid+16207        IF Results(Check,12)<=Results(2,12) THEN Majd=Majd+16210        IF Results(Check,15)<=Results(2,15) THEN Sigm=Sigm+16215        IF Results(Check,16)<=Results(2,16) THEN Strictm=Strictm+16216        IF Results(Check,17)<=Results(2,17) THEN Semim=Semim+16217        IF Results(Check,18)<=Results(2,18) THEN Majm=Majm+16308        '6309        NEXT Check6310        'PRINT Sigsym,Strictsym,Semisym,Majsym6311        'FOR Nnn=1 TO 4*(Randpart+1):PRINT Treenumbers(Nnn,1),Treenumbers(Nnn,2):NEXT Nnn:INPUT Kenndodd6320 PRINT #6,Sigsym/(Randpart+1),:PRINT #6,Strictsym/(Randpart+1),:PRINT #6,Semisym/(Randpart+1),:PRINT #6,Majsym/(Randpart+1),:PRINT #6,"-",:PRINT #6,"-",6321 PRINT #6,Sigd/(Randpart+1),:PRINT #6,Strictd/(Randpart+1),:PRINT #6,Semid/(Randpart+1),:PRINT #6,Majd/(Randpart+1),:PRINT #6,"-",:PRINT #6,"-",6998 Print #6,Sigm/(Randpart+1),:PRINT #6,Strictm/(Randpart+1),:PRINT #6,Semim/(Randpart+1),:PRINT #6,Majm/(Randpart+1),:PRINT #6,7000'7192 PRINT #6,"Approximate p-value for maximum assumptions being worse:",:PRINT #6,"-",:PRINT #6,"-",:PRINT #6,"-",:PRINT #6,"-",7198        FOR Check=2 TO Randpart+27200        IF Results(Check,3)>=Results(2,3) THEN Sigsym2=Sigsym2+17201        IF Results(Check,4)>=Results(2,4) THEN Strictsym2=Strictsym2+17202        IF Results(Check,5)>=Results(2,5) THEN Semisym2=Semisym2+17203        IF Results(Check,6)>=Results(2,6) THEN Majsym2=Majsym2+17204        IF Results(Check,9)>=Results(2,9) THEN Sigd2=Sigd2+17205        IF Results(Check,10)>=Results(2,10) THEN Strictd2=Strictd2+17206        IF Results(Check,11)>=Results(2,11) THEN Semid2=Semid2+17207        IF Results(Check,12)>=Results(2,12) THEN Majd2=Majd2+17210        IF Results(Check,15)>=Results(2,15) THEN Sigm2=Sigm2+17215        IF Results(Check,16)>=Results(2,16) THEN Strictm2=Strictm2+17216        IF Results(Check,17)>=Results(2,17) THEN Semim2=Semim2+17217        IF Results(Check,18)>=Results(2,18) THEN Majm2=Majm2+17308        '7309        NEXT Check7310        'PRINT Sigsym,Strictsym,Semisym,Majsym7311        'FOR Nnn=1 TO 4*(Randpart+1):PRINT Treenumbers(Nnn,1),Treenumbers(Nnn,2):NEXT Nnn:INPUT Kenndodd7320 PRINT #6,Sigsym2/(Randpart+1),:PRINT #6,Strictsym2/(Randpart+1),:PRINT #6,Semisym2/(Randpart+1),:PRINT #6,Majsym2/(Randpart+1),:PRINT #6,"-",:PRINT #6,"-",7321 PRINT #6,Sigd2/(Randpart+1),:PRINT #6,Strictd2/(Randpart+1),:PRINT #6,Semid2/(Randpart+1),:PRINT #6,Majd2/(Randpart+1),:PRINT #6,"-",:PRINT #6,"-",7998 Print #6,Sigm2/(Randpart+1),:PRINT #6,Strictm2/(Randpart+1),:PRINT #6,Semim2/(Randpart+1),:PRINT #6,Majm2/(Randpart+1),:PRINT 8000 PRINT " Results file written to ";:PRINT Origname$+"-"+Log$+".xls":PRINT " Program is finished":PRINT: CLOSE #1:CLOSE #2:CLOSE #6:END